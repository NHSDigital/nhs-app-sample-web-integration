<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <RootNamespace>nhsapp.sample.web.integration</RootNamespace>
    <UserSecretsId>86653b3f-1f2d-47a5-a82a-f95bf9faa3cd</UserSecretsId>
  </PropertyGroup>

  <!-- Paths of time stamp files for use in incremental builds. -->
  <PropertyGroup>
    <NpmInstallStampFile>node_modules/.install-stamp</NpmInstallStampFile>
    <FrontendBuildStampFile>node_modules/.build-stamp</FrontendBuildStampFile>
  </PropertyGroup>

  <!--
    Frontend build will only run if one of the files matched by the Includes has been modified since the last
    frontend build. Clean/Rebuild to force a frontend build.
  -->
  <ItemGroup>
    <FrontendInputs Include="wwwroot/src/**/*" />
    <!-- Assumed that a change to the npm packages could change the compiled files. -->
    <FrontendInputs Include="package.json" />
  </ItemGroup>

  <!--
    Include frontend assets in the "fast up-to-date check". Otherwise project will be seen by msbuild as up-to-date if
    only one of these files has been changed and will skip running the targets, including the build frontend target.
    See https://jacobdixon.uk/2020/10/compile-scss-at-build-time-visual-studio
  -->
  <ItemGroup>
    <UpToDateCheckInput Include="wwwroot/src/scss/**/*.scss" Set="css" />
    <UpToDateCheckBuilt Include="wwwroot/dist/*.css" Set="css" />
    <UpToDateCheckInput Include="wwwroot/src/js/**/*.js" Set="js" />
    <UpToDateCheckBuilt Include="wwwroot/dist/*.js" Set="js" />
    <UpToDateCheckInput Include="wwwroot/src/images/**/*" Set="images" />
    <UpToDateCheckBuilt Include="wwwroot/dist/images/**/*" Set="images" />
  </ItemGroup>

  <!-- Uncomment to use header and footer Nuget package <ItemGroup>
    <PackageReference Include="NhsUk.header-footer-api-client" Version="2.1.0" />
  </ItemGroup> -->
  <ItemGroup>
    <PackageReference Include="jose-jwt" Version="3.2.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
    <PackageReference Include="Portable.BouncyCastle" Version="1.9.0" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="6.16.0" />
  </ItemGroup>
  <ItemGroup>
    <Compile Remove="Views\ExampleAsync\**" />
    <Compile Remove="Views\ExampleForm\**" />
    <Compile Remove="Controllers\ExampleAsyncController.cs" />
    <Compile Remove="Controllers\ExampleFormController.cs" />
    <Compile Remove="ViewModels\AddressViewModel.cs" />
    <Compile Remove="ViewModels\ResultViewModel.cs" />
    <Compile Remove="ViewModels\SummaryViewModel.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Remove="Views\ExampleAsync\**" />
    <EmbeddedResource Remove="Views\ExampleForm\**" />
  </ItemGroup>
  <ItemGroup>
    <None Remove="Views\ExampleAsync\**" />
    <None Remove="Views\ExampleForm\**" />
  </ItemGroup>
  <ItemGroup>
    <Content Remove="Views\ExampleAsync\**" />
    <Content Remove="Views\ExampleForm\**" />
  </ItemGroup>
  <ItemGroup>
    <_ContentIncludedByDefault Remove="Views\ExampleAsync\Index.cshtml" />
    <_ContentIncludedByDefault Remove="Views\ExampleForm\Address.cshtml" />
    <_ContentIncludedByDefault Remove="Views\ExampleForm\Index.cshtml" />
    <_ContentIncludedByDefault Remove="Views\ExampleForm\Summary.cshtml" />
  </ItemGroup>

  <!--
    Only run "npm install" if packages.json has been updated since the last time it was run.
    Will always be run if $(NpmInstallStampFile) does not exist (e.g. the very first build).
    Deleted output files won't trigger a build. Manually modified output files will not trigger a build.
    Regeneration of output files can be forced via a rebuild (or clean then build).
    If using the dotnet command line, the "no-incremental" flag must be set to do a "rebuild".
    (Based on: https://stackoverflow.com/a/48020233)
  -->
  <Target Name="NpmInstall" BeforeTargets="Build frontend" Inputs="package.json" Outputs="$(NpmInstallStampFile)">
    <Exec Command="npm install" />
    <Touch Files="$(NpmInstallStampFile)" AlwaysCreate="true" />
  </Target>

  <!--
    Only build frontend if at least one of the frontend source files was modified since the last frontend build,
    or if packages.json has been updated since the last frontend build.
    Will always be run if $(FrontendBuildStampFile) does not exist (e.g. the very first build).
    Deleted source or output files won't trigger a build. Manually modified output files will not trigger a build.
    Regeneration of output files can be forced via a rebuild (or clean then build).
    If using the dotnet command line, the "no-incremental" flag must be set to do a "rebuild".
  -->
  <Target Name="Build frontend" BeforeTargets="BeforeBuild" Inputs="@(FrontendInputs)" Outputs="$(FrontendBuildStampFile)">
    <Exec Command="npm run build" />
    <Touch Files="$(FrontendBuildStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="ResetNpmInstallStampFile" AfterTargets="CoreClean">
    <!-- Delete time stamp to force npm install to re-run on next build. -->
    <Delete Files="$(NpmInstallStampFile)" />
    <!-- Delete time stamp to force building "frontend" on next build. -->
    <Delete Files="$(FrontendBuildStampFile)" />
  </Target>

</Project>
